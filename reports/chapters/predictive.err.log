Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/asyncio/base_events.py", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# hide code and show output
import numpy as np
import matplotlib.pyplot as plt
np.random.seed(11)

x = np.linspace(0, np.pi, 1_000)
x = np.linspace(0, 2*np.pi, 2_000)
y = np.sin(x)
n_axs = 3
fig, axs = plt.subplots(n_axs,1, figsize=(7,9), sharex=True, sharey=True)
ax = axs[0]
ax.set_aspect(1)
ax.plot(x_long, np.sin(x_long))
ax.set_title(r"Sine from 0 to $\pi$")
ax.set_xticks([0, np.pi/2, np.pi])
ax.set_xticklabels(['0', r"$\pi/2$", r"$\pi$"]) 

xlim, ylim = ax.get_xlim(), ax.get_ylim()

data_sets = dict()
n_sims = 100
n=10
for i in range(n_sims):
    x0 = np.random.uniform(0, np.pi, size=n)
    noise = np.random.normal(0, 0.1, size=n)
    y0 = np.sin(x0) + noise
    if 0 < i < n_axs:
        ax = axs[i]
        ax.set_aspect(1)
        ax.plot(x_long,np.sin(x_long), lw=0.5, color='gray')
        ax.scatter(x0, y0, ec='black', fc='white')
        
        # Add both linear and quadratic regression for axs[1] and axs[2]
        p1 = np.polyfit(x0, y0, 1)
        y_lin = np.polyval(p1, x)
        ax.plot(x, y_lin, 'r-', label='Linear fit', lw=2, color='C1')
        
        p2 = np.polyfit(x0, y0, 2)
        y_quad = np.polyval(p2, x)
        ax.plot(x, y_quad, 'g-', label='Quadratic fit', lw=2, color='C2')
        
        ax.legend()
        ax.set_title(f"Dataset {i} - Linear & Quadratic Regression")

for ax in axs:
    ax.set_ylim(ylim)
    ax.set_xlim(xlim)
        
plt.tight_layout()
plt.show()
------------------


[31m---------------------------------------------------------------------------[39m
[31mNameError[39m                                 Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[4][39m[32m, line 13[39m
[32m     11[39m ax = axs[[32m0[39m]
[32m     12[39m ax.set_aspect([32m1[39m)
[32m---> [39m[32m13[39m ax.plot([43mx_long[49m, np.sin(x_long))
[32m     14[39m ax.set_title([33mr[39m[33m"[39m[33mSine from 0 to $[39m[33m\[39m[33mpi$[39m[33m"[39m)
[32m     15[39m ax.set_xticks([[32m0[39m, np.pi/[32m2[39m, np.pi])

[31mNameError[39m: name 'x_long' is not defined


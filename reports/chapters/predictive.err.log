Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/asyncio/base_events.py", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Hide code, show output
eq = r"$\hat{y} = " + fr"{tufte_approval_only.params[0]:+.1f}{tufte_approval_only.params[1]:+.1f}x$"

fig, axs = plt.subplots(1,2, figsize=(8,3))

ax = axs[0]
y = df1.vote_loss
ax.scatter(df1.pres_approval, y, color='C0', label='training')
y = df2.vote_loss
ax.scatter(df2.pres_approval, y, color='C1', label='test')

ax.set_ylabel("Standardized Vote Loss") 
ax.set_xlabel("Presidential Approval Rating")
ax.set_title(eq)
ax.legend()

x0, x1 = df1.pres_approval.min(), df1.pres_approval.max()
y0 = res.params.values @ np.array([1, x0])
y1 = res.params.values @ np.array([1, x1])
ax.plot([x0, x1], [y0, y1], ls='dashed')

# residuals
ax = axs[1]
ax.set_title("Residual by year")
ax.scatter(df1.year, df1.single_lin_reg_residuals)
ax.scatter(df2.year, df2.single_lin_reg_residuals)
ax.axhline(0, ls='dotted', color='gray')
ax.set_ylabel("Residual")
ax.set_xlabel("Year")

plt.suptitle('Model 1')
plt.show()
------------------

----- stderr -----
/tmp/ipykernel_2218/3445955110.py:2: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  eq = r"$\hat{y} = " + fr"{tufte_approval_only.params[0]:+.1f}{tufte_approval_only.params[1]:+.1f}x$"
------------------

[31m---------------------------------------------------------------------------[39m
[31mNameError[39m                                 Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[2][39m[32m, line 18[39m
[32m     15[39m ax.legend()
[32m     17[39m x0, x1 = df1.pres_approval.min(), df1.pres_approval.max()
[32m---> [39m[32m18[39m y0 = [43mres[49m.params.values @ np.array([[32m1[39m, x0])
[32m     19[39m y1 = res.params.values @ np.array([[32m1[39m, x1])
[32m     20[39m ax.plot([x0, x1], [y0, y1], ls=[33m'[39m[33mdashed[39m[33m'[39m)

[31mNameError[39m: name 'res' is not defined

